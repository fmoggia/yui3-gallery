{
    "project": {},
    "files": {
        "js/contextmenu-view.js": {
            "name": "js/contextmenu-view.js",
            "modules": {
                "contextmenu": 1
            },
            "classes": {
                "Y.ContextMenuView": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "contextmenu": {
            "name": "contextmenu",
            "submodules": {},
            "classes": {
                "Y.ContextMenuView": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js/contextmenu-view.js",
            "line": 1,
            "description": "This module includes a Y.View class extension that attaches to an existing \"trigger\" Node and uses event delegation to listen\nfor \"contextmenu\" requests (i.e. right-click). When the context menu is invoked, a Y.Overlay object is rendered and displayed\nthat includes user-defined menu items that are related to the context where the menu was invoked.\n\nThis view utilizes several attributes and fires several events that users can listen to in order to take specific actions based\non the \"trigger target\" node.\n\nPlease refer to the [trigger](#attr_trigger) ATTRIBUTE for more description of the target.node and target.trigger.\n\n#####Usage\nTo configure a bare-bones basic contextmenu, you need to provide the `trigger` and `menuItems` attributes as;\n\n    var cmenu = new Y.ContextMenuView({\n       trigger: {\n           node:   Y.one(\".myExistingContainer\"),\n           target:  'li'\n       },\n       menuItems: [ \"Add\", \"Edit\", \"Delete\" ]\n   });\n\nThe `menuItems` can be simple entries or Objects, if they are Objects the \"label\" property will be used to fill the visible Menu (See [menuItems](#attr_menuItems)).\n\n#####Attributes / Events\nAn implementer is typically interested in listening to the following ATTRIBUTE \"change\" events;\n<ul>\n  <li>`selectedMenuChange` : which fires when a contextmenu choice is clicked (see [selectedMenu](#attr_selectedMenu))</li>\n  <li>`contextTargetChange`: which fires when the user \"right-clicks\" on the target.node (see [contextTarget](#attr_contextTarget))</li>\n</ul>\n\nAdditionally, see the [Events](#events) section for more information on available events.",
            "is_constructor": 1
        }
    },
    "classes": {
        "Y.ContextMenuView": {
            "name": "Y.ContextMenuView",
            "shortname": "Y.ContextMenuView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "contextmenu",
            "namespace": "",
            "file": "js/contextmenu-view.js",
            "line": 1,
            "description": "This module includes a Y.View class extension that attaches to an existing \"trigger\" Node and uses event delegation to listen\nfor \"contextmenu\" requests (i.e. right-click). When the context menu is invoked, a Y.Overlay object is rendered and displayed\nthat includes user-defined menu items that are related to the context where the menu was invoked.\n\nThis view utilizes several attributes and fires several events that users can listen to in order to take specific actions based\non the \"trigger target\" node.\n\nPlease refer to the [trigger](#attr_trigger) ATTRIBUTE for more description of the target.node and target.trigger.\n\n#####Usage\nTo configure a bare-bones basic contextmenu, you need to provide the `trigger` and `menuItems` attributes as;\n\n    var cmenu = new Y.ContextMenuView({\n       trigger: {\n           node:   Y.one(\".myExistingContainer\"),\n           target:  'li'\n       },\n       menuItems: [ \"Add\", \"Edit\", \"Delete\" ]\n   });\n\nThe `menuItems` can be simple entries or Objects, if they are Objects the \"label\" property will be used to fill the visible Menu (See [menuItems](#attr_menuItems)).\n\n#####Attributes / Events\nAn implementer is typically interested in listening to the following ATTRIBUTE \"change\" events;\n<ul>\n  <li>`selectedMenuChange` : which fires when a contextmenu choice is clicked (see [selectedMenu](#attr_selectedMenu))</li>\n  <li>`contextTargetChange`: which fires when the user \"right-clicks\" on the target.node (see [contextTarget](#attr_contextTarget))</li>\n</ul>\n\nAdditionally, see the [Events](#events) section for more information on available events."
        }
    },
    "classitems": [
        {
            "file": "js/contextmenu-view.js",
            "line": 39,
            "description": "Y.View's events static property, where we define a \"click\" listener on Nodes in the\ncontainer that are the MenuItem nodes.                    *",
            "itemtype": "property",
            "name": "events",
            "type": "{Object}",
            "access": "public",
            "tagname": "",
            "class": "Y.ContextMenuView",
            "module": "contextmenu"
        },
        {
            "file": "js/contextmenu-view.js",
            "line": 52,
            "description": "Default HTML template for the container's content         *",
            "itemtype": "property",
            "name": "template",
            "type": "{String}",
            "default": "'<div class=\"yui3-contextmenu-overlay\"></div>'",
            "access": "public",
            "tagname": "",
            "class": "Y.ContextMenuView",
            "module": "contextmenu"
        },
        {
            "file": "js/contextmenu-view.js",
            "line": 61,
            "description": "A placeholder to hold subscriber EventHandles so they can be destroyed properly",
            "itemtype": "property",
            "name": "_subscr",
            "type": "{Array}",
            "default": "null",
            "access": "protected",
            "tagname": "",
            "class": "Y.ContextMenuView",
            "module": "contextmenu"
        },
        {
            "file": "js/contextmenu-view.js",
            "line": 72,
            "description": "Sets an increment that the Overlay box will be positioned relative to the e.target \"x-coordinate\"",
            "itemtype": "property",
            "name": "_overlayDX",
            "type": "{Integer}",
            "default": "5",
            "access": "protected",
            "tagname": "",
            "class": "Y.ContextMenuView",
            "module": "contextmenu"
        },
        {
            "file": "js/contextmenu-view.js",
            "line": 81,
            "description": "Sets an increment that the Overlay box will be positioned relative to the e.target \"y-coordinate\"",
            "itemtype": "property",
            "name": "_overlayDY",
            "type": "{Integer}",
            "default": "11",
            "access": "protected",
            "tagname": "",
            "class": "Y.ContextMenuView",
            "module": "contextmenu"
        },
        {
            "file": "js/contextmenu-view.js",
            "line": 90,
            "description": "Initializer where we define initial handlers to invoke this view and to hide the Overlay",
            "itemtype": "method",
            "name": "initializer",
            "access": "protected",
            "tagname": "",
            "class": "Y.ContextMenuView",
            "module": "contextmenu"
        },
        {
            "file": "js/contextmenu-view.js",
            "line": 110,
            "description": "Clean up listeners and destroys the Overlay",
            "itemtype": "method",
            "name": "destructor",
            "access": "protected",
            "tagname": "",
            "class": "Y.ContextMenuView",
            "module": "contextmenu"
        },
        {
            "file": "js/contextmenu-view.js",
            "line": 130,
            "itemtype": "method",
            "name": "render",
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "this"
            },
            "chainable": 1,
            "class": "Y.ContextMenuView",
            "module": "contextmenu"
        },
        {
            "file": "js/contextmenu-view.js",
            "line": 142,
            "description": "Method that hides the Overlay for this contextmenu and fires the `contextMenuHide` event",
            "itemtype": "method",
            "name": "hideOverlay",
            "access": "public",
            "tagname": "",
            "class": "Y.ContextMenuView",
            "module": "contextmenu"
        },
        {
            "file": "js/contextmenu-view.js",
            "line": 154,
            "description": "Default value setter for attribute `overlay`, creates a Y.Overlay widget to display the menu within",
            "itemtype": "method",
            "name": "_valOverlay",
            "return": {
                "description": "",
                "type": "Y.Overlay"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.ContextMenuView",
            "module": "contextmenu"
        },
        {
            "file": "js/contextmenu-view.js",
            "line": 194,
            "description": "Handler for right-click event (actually \"contextmenu\" event) on `trigger.node`.",
            "itemtype": "method",
            "name": "_onContextMenu",
            "params": [
                {
                    "name": "e",
                    "description": "Y.Event target object created when \"context\" menu fires",
                    "type": "EventTarget"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.ContextMenuView",
            "module": "contextmenu"
        },
        {
            "file": "js/contextmenu-view.js",
            "line": 222,
            "description": "Fired after the \"contextmenu\" event is initiated and the Menu has been positioned and displayed",
            "itemtype": "event",
            "name": "contextMenuShow",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventTarget"
                }
            ],
            "class": "Y.ContextMenuView",
            "module": "contextmenu"
        },
        {
            "file": "js/contextmenu-view.js",
            "line": 229,
            "description": "Process a \"click\" event on the Content Menu's Overlay menuItems",
            "itemtype": "method",
            "name": "_selectMenuItem",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventTarget"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.ContextMenuView",
            "module": "contextmenu"
        },
        {
            "file": "js/contextmenu-view.js",
            "line": 253,
            "description": "Fires when a selection is \"clicked\" from within the pop-up menu \n(a better approach is to listen on attribute [selectedMenu](#attr_selectedMenu) for \"change\")",
            "itemtype": "event",
            "name": "select",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventTarget"
                }
            ],
            "class": "Y.ContextMenuView",
            "module": "contextmenu"
        },
        {
            "file": "js/contextmenu-view.js",
            "line": 261,
            "description": "Fired after a Menu choice has been selected from the ContexMenu and the menu has been hidden",
            "itemtype": "event",
            "name": "contextMenuHide",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventTarget"
                }
            ],
            "class": "Y.ContextMenuView",
            "module": "contextmenu"
        },
        {
            "file": "js/contextmenu-view.js",
            "line": 267,
            "description": "Helper method to clear DOM \"selected\" text or ranges",
            "itemtype": "method",
            "name": "_clearDOMSelection",
            "access": "private",
            "tagname": "",
            "class": "Y.ContextMenuView",
            "module": "contextmenu"
        },
        {
            "file": "js/contextmenu-view.js",
            "line": 281,
            "description": "Container Node where the menu's Overlay will be rendered into.  If not provided, the\ndefault will create a container from the [template](#property_template) setting.\n\nThis is usually only set when the user has a specific Overlay container design they\nwish to utilize.",
            "itemtype": "attribute",
            "name": "container",
            "type": "{Node}",
            "default": "Y.Node.create(this.template)",
            "class": "Y.ContextMenuView",
            "module": "contextmenu"
        },
        {
            "file": "js/contextmenu-view.js",
            "line": 296,
            "description": "Defines the container element for the \"contextmenu\" event listener to attach this menu to.\n<br/><br/>This {Object} must contain the following;<br/>\n<ul>\n  <li>`node` {Node} the Node instance that will have a delegated \"contextmenu\" listener \n       attached to it</li>\n           <li>`target` {String} A CSS selector for the \"target\" sub-element (child of trigger.node) that will be used for the delegation and will be returned from attribute \"contextTarget\"</li>\n</ul>",
            "example": [
                "\n      // This will define the trigger node (to accept right-clicks) as a DataTable's THEAD\n      //  element and the target as the TH nodes.\n      trigger : {\n          node:   myDataTable.get('srcNode').one('thead .yui3-datatable-columns'),\n          target: \"th\"\n      }"
            ],
            "itemtype": "attribute",
            "name": "trigger",
            "type": "{String} trigger.target Container filter selector to assign target from container event",
            "default": "{node:null, target:''}",
            "class": "Y.ContextMenuView",
            "module": "contextmenu"
        },
        {
            "file": "js/contextmenu-view.js",
            "line": 326,
            "description": "Set to the returned target within the `trigger.node` container that the \"contextmenu\" event was initiated on\n(e.g. for a DataTable this may be a specific TR row within the table body).",
            "itemtype": "attribute",
            "name": "contextTarget",
            "type": "{Node}",
            "default": "null",
            "readonly": "",
            "class": "Y.ContextMenuView",
            "module": "contextmenu"
        },
        {
            "file": "js/contextmenu-view.js",
            "line": 340,
            "description": "Overrideable HTML template to use for creating each `menuItem` entry in Overlay.\nMust include \"data-cmenu\"",
            "itemtype": "attribute",
            "name": "menuItemTemplate",
            "type": "{String}",
            "default": "'<div class=\"{menuClass}\" data-cmenu=\"{menuIndex}\">{menuContent}</div>'",
            "class": "Y.ContextMenuView",
            "module": "contextmenu"
        },
        {
            "file": "js/contextmenu-view.js",
            "line": 352,
            "description": "Array of \"menu\" items as either {Strings} or {Objects} to add to the Menu.  \n\nWhen {Objects} are included, as a minimum they must include a `label` property that contains the text to display in the menu.",
            "example": [
                "\n\tmenuItems: [ \"one\", \"two\", \"three\", \"four\" ]\n\tmenuItems: [ \"Insert\", \"Update\", {label:\"Delete\", confirm:true}, \"... More\" ]\n\tmenuItems: [ {label:\"Foo\", value:100}, {label:\"Bar\", value:105}, {label:\"Baz\", value:200} ]"
            ],
            "itemtype": "attribute",
            "name": "menuItems",
            "type": "{Array}",
            "default": "[]",
            "class": "Y.ContextMenuView",
            "module": "contextmenu"
        },
        {
            "file": "js/contextmenu-view.js",
            "line": 370,
            "description": "Y.Overlay instance used to render the pop-up context menu within\n\n**Default:** See [_valOverlay](#method__valOverlay)",
            "itemtype": "attribute",
            "name": "overlay",
            "type": "Y.Overlay",
            "class": "Y.ContextMenuView",
            "module": "contextmenu"
        },
        {
            "file": "js/contextmenu-view.js",
            "line": 383,
            "description": "Set to the \"selected\" item from the pop-up Overlay menu when clicked by user, where this\nattribute is set to an object containing the EventTarget of the selection and the resulting\nmenuitem and menuindex that corresponds to the selection.\n\nThis is set by the method [_selectMenuItem](#method__selectMenuItem).\n\nSet to an {Object} with the following properties;\n  <ul>\n  <li>`evt` Event target from \"click\" selection within displayed Overlay</li>\n  <li>`menuItem` Menuitem object entry selected from `menuItems` array</li>\n  <li>`menuIndex` Index of current Menuitem object within the [menuItems](#attr_menuItems) attribute array</li>\n  </ul>",
            "example": [
                "\n\t// If the 'selectedMenu' was set to the 2nd item from the following menuItems setting ...\n\tmyCmenu.set('menuItems',[ {label:\"Foo\", value:100}, {label:\"Bar\", value:105}, {label:\"Baz\", value:200} ]);\n\t\n\t// ... user clicks 2nd item,\n\tmyCmenu.get('selectedMenu') \n\t// returns {evt:'event stuff object', menuItem:{label:\"Bar\", value:105}, menuIndex:1 }   "
            ],
            "itemtype": "attribute",
            "name": "selectedMenu",
            "type": "{Object} obj",
            "readonly": "",
            "class": "Y.ContextMenuView",
            "module": "contextmenu"
        }
    ]
}