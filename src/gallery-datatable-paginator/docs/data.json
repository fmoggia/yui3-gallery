{
    "project": {},
    "files": {
        "js/datatable-paginator-class.js": {
            "name": "js/datatable-paginator-class.js",
            "modules": {
                "datatable": 1
            },
            "classes": {
                "Y.DataTable.Paginator": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "datatable": {
            "name": "datatable",
            "submodules": {},
            "classes": {
                "Y.DataTable.Paginator": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js/datatable-paginator-class.js",
            "line": 1,
            "description": "Defines a Y.DataTable class extension to add capability to support a Paginator View-Model and allow\n paging of actively displayed data within the DT instance.\n\nWorks with either client-side pagination (i.e. local data, usually in form of JS Array) or\n in conjunction with remote server-side pagination, via either DataSource or ModelSync.REST.\n\nAllows for dealing with sorted data, wherein the local data is sorted in place, and in the case of remote data the \"sortBy\" attribute is passed to the remote server.\n\n <h4>Usage</h4>\n\n      var dtable = new Y.DataTable({\n          columns:    [ 'firstName','lastName','state','age', 'grade' ],\n          data:       enrollment.records,\n          scrollable: 'y',\n          height:     '450px',\n          paginator:  new PaginatorView({\n              model:  new PaginatorModel({itemsPerPage:50, page:1})\n          })\n\n      });\n\n <h4>Client OR Server Pagination</h4>\n\n A determination of whether the source of `data` is either \"local\" data (i.e. a Javascript Array or Y.ModelList), or is\n provided from a server (either DataSource or ModelSync.REST) is made in the method [_bindPaginator](#method__bindPaginator).\n We use a \"duck-type\" evaluation, which may not be completely robust, but has worked so far in testing.\n\n For remote data, the initial call to `.set('data',...)` and/or `data.load(...)` returns a null array, of zero length, while\n the request is being retrieved.  We use this fact to discern that it is not \"local\" data.  Then we evaluate whether the\n `datasource` plugin exists, and if so we assume the source is DataSource, and set `_pagDataSrc:'ds'`.  Otherwise, if the\n `data` property (i.e. the ModelList) contains an attribute `totalRecs` we expect that data will be retrieved via ModelSync.REST\n and set `_pagDataSrc:'mlist'`.\n\n <h4>Loading the `data` For a Page</h4>\n Once the \"source of data\" is known, the method [processPageRequest](#method_processPageRequest) fires on a `pageChange`.\n\n For the case of \"local data\", i.e. where `_pagDataSrc:'local'`, the existing buffer of data is sliced according to the pagination\n state, and the data is loaded silently, and `this.syncUI()` is fired to refresh the DT.\n\n The case of \"remote data\" (from a server) is actually more straightforward.  This extension DOES NOT \"cache\" pages for remote\n data, it simply inserts the full returned data into the DT.  So as a consequence, a pagination state change for remote data\n involves a simple request sent to the server source (either DataSource or ModelSync.REST) and the response results are\n loaded in the DT.",
            "extends": "Y.DataTable",
            "version": "1.0.1",
            "since": "3.6.0",
            "author": "Todd Smith"
        }
    },
    "classes": {
        "Y.DataTable.Paginator": {
            "name": "Y.DataTable.Paginator",
            "shortname": "Y.DataTable.Paginator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "DataTable"
            ],
            "module": "datatable",
            "namespace": "",
            "file": "js/datatable-paginator-class.js",
            "line": 1,
            "description": "Defines a Y.DataTable class extension to add capability to support a Paginator View-Model and allow\n paging of actively displayed data within the DT instance.\n\nWorks with either client-side pagination (i.e. local data, usually in form of JS Array) or\n in conjunction with remote server-side pagination, via either DataSource or ModelSync.REST.\n\nAllows for dealing with sorted data, wherein the local data is sorted in place, and in the case of remote data the \"sortBy\" attribute is passed to the remote server.\n\n <h4>Usage</h4>\n\n      var dtable = new Y.DataTable({\n          columns:    [ 'firstName','lastName','state','age', 'grade' ],\n          data:       enrollment.records,\n          scrollable: 'y',\n          height:     '450px',\n          paginator:  new PaginatorView({\n              model:  new PaginatorModel({itemsPerPage:50, page:1})\n          })\n\n      });\n\n <h4>Client OR Server Pagination</h4>\n\n A determination of whether the source of `data` is either \"local\" data (i.e. a Javascript Array or Y.ModelList), or is\n provided from a server (either DataSource or ModelSync.REST) is made in the method [_bindPaginator](#method__bindPaginator).\n We use a \"duck-type\" evaluation, which may not be completely robust, but has worked so far in testing.\n\n For remote data, the initial call to `.set('data',...)` and/or `data.load(...)` returns a null array, of zero length, while\n the request is being retrieved.  We use this fact to discern that it is not \"local\" data.  Then we evaluate whether the\n `datasource` plugin exists, and if so we assume the source is DataSource, and set `_pagDataSrc:'ds'`.  Otherwise, if the\n `data` property (i.e. the ModelList) contains an attribute `totalRecs` we expect that data will be retrieved via ModelSync.REST\n and set `_pagDataSrc:'mlist'`.\n\n <h4>Loading the `data` For a Page</h4>\n Once the \"source of data\" is known, the method [processPageRequest](#method_processPageRequest) fires on a `pageChange`.\n\n For the case of \"local data\", i.e. where `_pagDataSrc:'local'`, the existing buffer of data is sliced according to the pagination\n state, and the data is loaded silently, and `this.syncUI()` is fired to refresh the DT.\n\n The case of \"remote data\" (from a server) is actually more straightforward.  This extension DOES NOT \"cache\" pages for remote\n data, it simply inserts the full returned data into the DT.  So as a consequence, a pagination state change for remote data\n involves a simple request sent to the server source (either DataSource or ModelSync.REST) and the response results are\n loaded in the DT."
        }
    },
    "classitems": [
        {
            "file": "js/datatable-paginator-class.js",
            "line": 62,
            "description": "Adds a paginator view (specifically, Y.PaginatorView) instance to the DataTable.",
            "itemtype": "attribute",
            "name": "paginator",
            "type": "Y.View",
            "default": "null",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator-class.js",
            "line": 77,
            "description": "Holder for the \"original\" un-paged data that the DataTable was based upon.\n\nThis property is stored as an Array, from the original \"data\" ModelList.\nFor remote data, it is used as-is.\nFor local data, is sliced as needed to re-set each data Page.\n\nPopulated in _bindPaginator and utilized in processPageRequest",
            "itemtype": "property",
            "name": "_mlistArray",
            "type": "Array",
            "default": "null",
            "static": 1,
            "since": "3.6.0",
            "access": "protected",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator-class.js",
            "line": 96,
            "description": "Placeholder for a text flag indicating the duck-typed source of data for this\n DataTable, this is set in `_bindPaginator` to either of 'ds', 'mlist' or 'local'\n\n Populated in _bindPaginator\n Utilized in processPageRequest",
            "itemtype": "property",
            "name": "_pagDataSrc",
            "type": "String",
            "default": "null",
            "static": 1,
            "since": "3.6.0",
            "access": "protected",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator-class.js",
            "line": 113,
            "description": "A convenience property (which is identical to the attribute `paginator`) for use by the user.",
            "itemtype": "property",
            "name": "paginator",
            "type": "{Y.PaginatorView|View}",
            "default": "null",
            "access": "public",
            "tagname": "",
            "since": "3.6.0",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator-class.js",
            "line": 128,
            "description": "This initializer sets up the listeners related to the original DataTable instance and\n also related to the underlying \"data\" attribute the DT is based upon.",
            "itemtype": "method",
            "name": "initializer",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "this"
            },
            "chainable": 1,
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator-class.js",
            "line": 158,
            "description": "Destructor to clean up listener event handlers and the internal storage buffer.",
            "itemtype": "method",
            "name": "destructor",
            "access": "public",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator-class.js",
            "line": 177,
            "description": "Method to re-initialize the original data, mostly targeted at local data\n when a new 'data' is set, untested.",
            "itemtype": "method",
            "name": "dataReset",
            "params": [
                {
                    "name": "data",
                    "description": "Data to be reset to ... either as a JS Array or a Y.ModelList",
                    "type": "Array|ModelList"
                }
            ],
            "access": "public",
            "tagname": "",
            "return": {
                "description": "nothing"
            },
            "beta": 1,
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator-class.js",
            "line": 199,
            "description": "Primary workhorse method that is fired when the Paginator \"page\" changes,\n  and returns a new subset of data for the DT\n  or sends a new request to a remote source to populate the DT",
            "itemtype": "method",
            "name": "processPageRequest",
            "params": [
                {
                    "name": "page_no",
                    "description": "Current page number to change to",
                    "type": "Integer"
                },
                {
                    "name": "pag_state",
                    "description": "Pagination state object (this is NOT populated in local .. non-server type pagination) including;",
                    "type": "Object",
                    "props": [
                        {
                            "name": "indexStart",
                            "description": "Starting index returned from server response",
                            "type": "Integer"
                        },
                        {
                            "name": "numRecs",
                            "description": "Count of records returned from the response",
                            "type": "Integer"
                        }
                    ]
                }
            ],
            "access": "public",
            "tagname": "",
            "return": {
                "description": "nothing"
            },
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator-class.js",
            "line": 285,
            "description": "Listener hooked to the original DT's \"syncUI\" event, only stores the ModelList for\n the DT on the first pass through.\n\n For server-generated data, this method determines the server type (DataSource or ModelSync.REST)\n  and sets the property flag _pagDataSrc to either 'ds' or 'mlist'",
            "itemtype": "method",
            "name": "_bindPaginator",
            "since": "3.6.0",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "true or false"
            },
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator-class.js",
            "line": 376,
            "description": "Listener that fires when the Model's 'pageChange' fires, this extracts the current page from the state object and then\n hooks up the processPageRequest method.",
            "itemtype": "method",
            "name": "_pageListener",
            "params": [
                {
                    "name": "o",
                    "description": "which contains a `state` object containing the `Model.getAttrs()` attributes",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator-class.js",
            "line": 390,
            "description": "This is a setter for the 'paginator' attribute, primarily to set the public property `paginator` to the\nattribute value.",
            "itemtype": "method",
            "name": "_setPaginator",
            "params": [
                {
                    "name": "val",
                    "description": "The PaginatorView instance to set",
                    "type": "PaginatorView|View"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator-class.js",
            "line": 405,
            "description": "A method that fires after the DataTable `renderView` method completes, that is *approximately* when\nthe DataTable has finished rendering.",
            "itemtype": "method",
            "name": "_notifyRender",
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator-class.js",
            "line": 416,
            "description": "A connector method that will re-bind the Paginator instance to this DataTable after an underlying\nchange to \"data\" (via `*:change`, `*:reset`, `*:add`, `*:remove` events)",
            "itemtype": "method",
            "name": "_afterSetData",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator-class.js",
            "line": 430,
            "description": "Fires after the DataTable 'renderView' event fires",
            "itemtype": "event",
            "name": "render",
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator-class.js",
            "line": 435,
            "description": "Fires after the DataTable-Paginator updates the page data and/or sends the remote request for more data",
            "itemtype": "event",
            "name": "pageupdate",
            "params": [
                {
                    "name": "pagStatus",
                    "description": "containing following;",
                    "type": "Object",
                    "props": [
                        {
                            "name": "pag_state",
                            "description": "Of Paginator Model `getAttrs()` as an Object",
                            "type": "Object"
                        },
                        {
                            "name": "view",
                            "description": "Instance of the Paginator View",
                            "type": "View"
                        }
                    ]
                }
            ],
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        },
        {
            "file": "js/datatable-paginator-class.js",
            "line": 443,
            "description": "Fires after the DataTable-Paginator has setup properly, rendered the View and is ready to accept page changes",
            "itemtype": "event",
            "name": "paginatorSetup",
            "params": [
                {
                    "name": "pagObj",
                    "description": "Containing following;",
                    "type": "Object",
                    "props": [
                        {
                            "name": "model",
                            "description": "Instance of Paginator Model",
                            "type": "Model"
                        },
                        {
                            "name": "view",
                            "description": "Instance of the Paginator View",
                            "type": "View"
                        }
                    ]
                }
            ],
            "class": "Y.DataTable.Paginator",
            "module": "datatable"
        }
    ]
}